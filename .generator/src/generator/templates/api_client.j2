=begin
{% include "api_info.j2" %}
=end

require 'date'
require 'json'
require 'logger'
require 'tempfile'
require 'time'
require 'httparty'
begin
  require 'zstandard'
rescue LoadError
end

module {{ module_name }}
  class APIClient
    # The Configuration object holding settings to be used in the API client.
    attr_accessor :config

    # Defines the headers to be used in HTTP requests of all API calls by default.
    #
    # @return [Hash]
    attr_accessor :default_headers

    # Initializes the APIClient
    # @option config [Configuration] Configuration for initializing the object, default to Configuration.default
    def initialize(config = Configuration.default)
      @config = config
      @user_agent = "#{{ '{' }}{{ module_name }}::USER_AGENT}"
      @default_headers = {
        'User-Agent' => @user_agent
      }
      @default_headers['Accept-Encoding'] = 'gzip' if @config.compress
    end

    def self.default
      @@default ||= APIClient.new
    end

    # Call an API with given options.
    #
    # @return [Array<(Object, Integer, Hash)>] an array of 3 elements:
    #   the data deserialized from response body (could be nil), response status code and response headers.
    def call_api(http_method, path, opts = {})
      request = build_request(http_method, path, opts)
      if opts[:stream_body]
        tempfile = nil
        encoding = nil

        response = request.perform do | chunk |
          unless tempfile
            content_disposition = chunk.http_response.header['Content-Disposition']
            if content_disposition && content_disposition =~ /filename=/i
              filename = content_disposition[/filename=['"]?([^'"\s]+)['"]?/, 1]
              prefix = sanitize_filename(filename)
            else
              prefix = 'download-'
            end
            prefix = prefix + '-' unless prefix.end_with?('-')
            unless encoding
              encoding = chunk.encoding
            end
            tempfile = Tempfile.open(prefix, @config.temp_folder_path, encoding: encoding)
            @tempfile = tempfile
          end
          chunk.force_encoding(encoding)
          tempfile.write(chunk)
        end
        if tempfile
          tempfile.close
          @config.logger.info "Temp file written to #{tempfile.path}, please copy the file to a proper folder "\
                            "with e.g. `FileUtils.cp(tempfile.path, '/new/file/path')` otherwise the temp file "\
                            "will be deleted automatically with GC. It's also recommended to delete the temp file "\
                            "explicitly with `tempfile.delete`"
        end
      else
        response = request.perform
      end

      if @config.debugging
        @config.logger.debug "HTTP response body ~BEGIN~\n#{response.body}\n~END~\n"
      end

      unless response.success?
        if response.request_timeout?
          fail APIError.new('Connection timed out')
        elsif response.code == 0
          # Errors from libcurl will be made visible here
          fail APIError.new(:code => 0,
                            :message => response.return_message)
        else
          body = response.body
          if response.headers['Content-Encoding'].eql?('gzip') && !(body.nil? || body.empty?) then
            gzip = Z