=begin
{% include "api_info.j2" %}
=end

require 'cgi'

module {{ module_name }}::{{ version|upper }}
{%- set classname = name.replace(" ", "") + "API" %}
  class {{ classname }}
    attr_accessor :api_client

    def initialize(api_client = {{ module_name }}::APIClient.default)
      @api_client = api_client
    end

{%- for path, method, operation in operations|sort(attribute="2.operationId") %}
    {%- set httpMethod = method.upper() %}
    {%- set returnType = operation|return_type %}

    {{ operation.summary|block_comment|indent(4) }}.
    #
    # @see #{{ operation.operationId|snake_case }}_with_http_info
    def {{ operation.operationId|snake_case }}({% for name, parameter in operation|parameters if parameter.required %}{{ name|attribute_name }}, {% endfor %}opts = {})
      {% if returnType %}data, _status_code, _headers = {% endif %}{{ operation.operationId|snake_case }}_with_http_info({% for name, parameter in operation|parameters if parameter.required %}{{ name|attribute_name }}, {% endfor %}opts)
      {% if returnType %}data{% else %}nil{% endif %}
    end

    {{ operation.summary|block_comment|indent(4) }}.
    {%- if operation.description %}
    #
    {{ operation.description|block_comment|indent(4) }}
    #
    {%- endif %}
    {%- if operation.deprecated %}
    # @deprecated This API is deprecated.
    #
    {%- endif %}
    {%- for name, parameter in operation|parameters if parameter.required %}
    # @param {{ name|attribute_name }} [{{ get_type_for_parameter(parameter) }}] {{ parameter.get("description", "").replace('\n', ' ') }}
    {%- endfor %}
    # @param opts [Hash] the optional parameters
    {%- for name, parameter in operation|parameters if not parameter.required %}
    # @option opts [{{ get_type_for_parameter(parameter) }}] :{{ name|attribute_name }} {{ parameter.get("description", "").replace('\n', ' ') }}{% if "default" in parameter%} (default to {{ parameter.default|json }}) {% endif %}
    {%- endfor %}
    # @return [Array<({% if returnType %}{{ returnType }}{% else %}nil{% endif %}, Integer, Hash)>] {% if returnType %}{{ returnType }} data{% else %}nil{% endif %}, response status code and response headers
    def {{ operation.operationId|snake_case }}_with_http_info({% for name, parameter in operation|parameters if parameter.required %}{{ name|attribute_name }}, {% endfor %}opts = {})
      {%- if operation.deprecated %}
      warn "[DEPRECATION] `{{ operation.operationId }}` is deprecated."
      {%- endif %}
      {%- if "x-unstable" in operation %}
      unstable_enabled = @api_client.config.unstable_operations["{{ version }}.{{ operation.operationId|snake_case }}".to_sym]
      if unstable_enabled
        @api_client.config.logger.warn format("Using unstable operation '%s'", "{{ version }}.{{ operation.operationId|snake_case }}")
      else
        raise {{ module_name }}::APIError.new(message: format("Unstable operation '%s' is disabled", "{{ version }}.{{ operation.operationId|snake_case }}"))
      end
      {%- endif %}

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: {{classname}}.{{ operation.operationId|snake_case }} ...'
      end

{%- for name, parameter in operation|parameters %}
  {%- set schema = parameter|parameter_schema %}
  {%- if parameter.required %}
    {%- if not parameter.nullable %}
      # verify the required parameter '{{ name|attribute_name }}' is set
      if @api_client.config.client_side_validation && {{ name|attribute_name }}.nil?
        fail ArgumentError, "Missing the required parameter '{{ name|attribute_name }}' when calling {{classname}}.{{ operation.operationId|snake_case }}"
      end
      {%- if schema.enum is defined and not parameter|collection_format %}
      # verify enum value
      allowable_values = [{% for value in schema.enum %}{{ value|format_value }}{%- if not loop.last %}, {% endif %}{% endfor %}]
      if @api_client.config.client_side_validation && !allowable_values.include?({{ name|attribute_name }})
        fail ArgumentError, "invalid value for \"{{ name|attribute_name }}\", must be one of #{allowable_values}"
      end
      {%- endif %}
    {%- endif %}
  {%- else %}
    {%- if schema.enum is defined %}
      allowable_values = [{% for value in schema.enum %}{{ value|format_value }}{%- if not loop.last %}, {% endif %}{% endfor %}]
      {%- if parameter|collection_format %}
      if @api_client.config.client_side_validation && opts[:'{{ name|attribute_name }}'] && !opts[:'{{ name|attribute_name }}'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"{{ name|attribute_name }}\", must include one of #{allowable_values}"
      end
      {%- else %}
      if @api_client.config.client_side_validation && opts[:'{{ name|attribute_name }}'] && !allowable_values.include?(opts[:'{{ name|attribute_name }}'])
        fail ArgumentError, "invalid value for \"{{ name|attribute_name }}\", must be one of #{allowable_values}"
      end
      {%- endif %}
    {%- endif %}

  {%- endif %}
  {%- if schema.maxLength is defined %}
      if @api_client.config.client_side_validation && {% if not parameter.required %}!opts[:'{{ name|attribute_name }}'].nil? && {% endif %}{% if parameter.required %}{{ name|attribute_name }}{% else %}opts[:'{{ name|attribute_name }}']{% endif %}.to_s.length > {{ sche