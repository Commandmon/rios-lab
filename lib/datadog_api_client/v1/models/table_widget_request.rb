=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'date'
require 'time'

module DatadogAPIClient::V1
  # Updated table widget.
  class TableWidgetRequest
    include BaseGenericModel

    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # Aggregator used for the request.
    attr_accessor :aggregator

    # The column name (defaults to the metric name).
    attr_accessor :_alias

    # The log query.
    attr_accessor :apm_query

    # The APM stats query for table and distributions widgets.
    attr_accessor :apm_stats_query

    # A list of display modes for each table cell.
    attr_accessor :cell_display_mode

    # List of conditional formats.
    attr_accessor :conditional_formats

    # The log query.
    attr_accessor :event_query

    # List of formulas that operate on queries.
    attr_accessor :formulas

    # For metric queries, the number of lines to show in the table. Only one request should have this property.
    attr_accessor :limit

    # The log query.
    attr_accessor :log_query

    # The log query.
    attr_accessor :network_query

    # Widget sorting methods.
    attr_accessor :order

    # The process query to use in the widget.
    attr_accessor :process_query

    # The log query.
    attr_accessor :profile_metrics_query

    # Query definition.
    attr_accessor :q

    # List of queries that can be returned directly or used in formulas.
    attr_accessor :queries

    # Timeseries or Scalar response.
    attr_accessor :response_format

    # The log query.
    attr_accessor :rum_query

    # The log query.
    attr_accessor :security_query

    # Attribute mapping from ruby-style variable name to JSON key.
    # @!visibility private
    def self.attribute_map
      {
        :'aggregator' => :'aggregator',
        :'_alias' => :'alias',
        :'apm_query' => :'apm_query',
        :'apm_stats_query' => :'apm_stats_query',
        :'cell_display_mode' => :'cell_display_mode',
        :'conditional_formats' => :'conditional_formats',
        :'event_query' => :'event_query',
        :'formulas' => :'formulas',
        :'limit' => :'limit',
        :'log_query' => :'log_query',
        :'network_query' => :'network_query',
        :'order' => :'order',
        :'process_query' => :'process_query',
        :'profile_metrics_query' => :'profile_metrics_query',
        :'q' => :'q',
        :'queries' => :'queries',
        :'response_format' => :'response_format',
        :'rum_query' => :'rum_query',
        :'security_query' => :'security_query'
      }
    end

    # Attribute type mapping.
    # @!visibility private
    def self.openapi_types
      {
        :'aggregator' => :'WidgetAggregator',
        :'_alias' => :'String',
        :'apm_query' => :'LogQueryDefinition',
        :'apm_stats_query' => :'ApmStatsQueryDefinition',
        :'cell_display_mode' => :'Array<TableWidgetCellDisplayMode>',
        :'conditional_formats' => :'Array<WidgetConditionalFormat>',
        :'event_query' => :'LogQueryDefinition',
        :'formulas' => :'Array<WidgetFormula>',
        :'limit' => :'Integer',
        :'log_query' => :'LogQueryDefinition',
        :'network_query' => :'LogQueryDefinition',
        :'order' => :'WidgetSort',
        :'process_query' => :'ProcessQueryDefinition',
        :'profile_metrics_query' => :'LogQueryDefinition',
        :'q' => :'String',
        :'queries' => :'Array<FormulaAndFunctionQueryDefinition>',
        :'response_format' => :'FormulaAndFunctionResponseFormat',
        :'rum_query' => :'LogQueryDefinition',
        :'security_query' => :'LogQueryDefinition'
      }
    end

    # Initializes the object
    # @param attributes [Hash] Model attributes in the form of hash
    # @!visibility private
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DatadogAPIClient::V1::TableWidgetRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
   