
=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

module DatadogAPIClient::V1
  module BaseEnumModel
    # Builds the enum from string
    # @param value [String] The enum value in the form of the string
    # @return [String] The enum value
    # @!visibility private
    def build_from_hash(value)
      constantValues = self.class.constants.select { |c| self.class::const_get(c) == value }
      constantValues.empty? ? DatadogAPIClient::UnparsedObject.new(value) : value
    end

    module ClassMethods
      # Builds the enum from string
      # @param value [String] The enum value in the form of the string
      # @return [String] The enum value
      # @!visibility private
      def build_from_hash(value)
        new.build_from_hash(value)
      end
    end

    def self.included(base)
        base.extend(ClassMethods)
    end
  end

  module BaseGenericModel
    # Whether the object has unparsed attributes
    # @!visibility private
    attr_accessor :_unparsed

    # @see the `==` method implementation in child classes
    # @param o [Object] Object to be compared
    # @!visibility private
    def eql?(o)
      self == o
    end

    # Builds the object from hash
    # @param attributes [Hash] Model attributes in the form of hash
    # @return [Object] Returns the model itself
    # @!visibility private
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes.key?(self.class.attribute_map[key]) && attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          res = _deserialize(type, attributes[self.class.attribute_map[key]])
          if res.instance_of? DatadogAPIClient::UnparsedObject
            self._unparsed = true
          elsif (res.kind_of? DatadogAPIClient::V1::BaseGenericModel) && res._unparsed
            self._unparsed = true