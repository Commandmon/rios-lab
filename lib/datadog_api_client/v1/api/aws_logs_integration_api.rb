=begin
#Datadog API V1 Collection

#Collection of all Datadog Public endpoints.

The version of the OpenAPI document: 1.0
Contact: support@datadoghq.com
Generated by: https://github.com/DataDog/datadog-api-client-ruby/tree/master/.generator

 Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 This product includes software developed at Datadog (https://www.datadoghq.com/).
 Copyright 2020-Present Datadog, Inc.

=end

require 'cgi'

module DatadogAPIClient::V1
  class AWSLogsIntegrationAPI
    attr_accessor :api_client

    def initialize(api_client = DatadogAPIClient::APIClient.default)
      @api_client = api_client
    end

    # Check that an AWS Lambda Function exists.
    #
    # @see #check_aws_logs_lambda_async_with_http_info
    def check_aws_logs_lambda_async(body, opts = {})
      data, _status_code, _headers = check_aws_logs_lambda_async_with_http_info(body, opts)
      data
    end

    # Check that an AWS Lambda Function exists.
    #
    # Test if permissions are present to add a log-forwarding triggers for the given services and AWS account. The input
    # is the same as for Enable an AWS service log collection. Subsequent requests will always repeat the above, so this
    # endpoint can be polled intermittently instead of blocking.
    #
    # - Returns a status of 'created' when it's checking if the Lambda exists in the account.
    # - Returns a status of 'waiting' while checking.
    # - Returns a status of 'checked and ok' if the Lambda exists.
    # - Returns a status of 'error' if the Lambda does not exist.
    #
    # @param body [AWSAccountAndLambdaRequest] Check AWS Log Lambda Async request body.
    # @param opts [Hash] the optional parameters
    # @return [Array<(AWSLogsAsyncResponse, Integer, Hash)>] AWSLogsAsyncResponse data, response status code and response headers
    def check_aws_logs_lambda_async_with_http_info(body, opts = {})

      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AWSLogsIntegrationAPI.check_aws_logs_lambda_async ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AWSLogsIntegrationAPI.check_aws_logs_lambda_async"
      end
      # resource path
      local_var_path = '/api/v1/integration/aws/logs/check_async'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AWSLogsAsyncResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || [:apiKeyAuth, :appKeyAuth, :AuthZ]

      new_options = opts.merge(
        :operation => :check_aws_logs_lambda_async,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
        :api_version => "V1"
      )

      data, status_code, headers = @api_client.call_api(Net::HTTP::Post, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AWSLogsIntegrationAPI#check_aws_logs_lambda_async\nData: #{data.inspect}\nStatus code: #{status_code}